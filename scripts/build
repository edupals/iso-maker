#! /bin/sh
set -e

export LC_ALL=C

( . "${LIVE_BUILD}/scripts/build.sh" > /dev/null 2>&1 || true ) || . /usr/lib/live/build.sh

Arguments "${@}"

Read_conffiles config/all config/common config/bootstrap config/chroot config/binary config/source
Set_defaults

. auto/functions

# New nf_tables-based versions of iptables don't work well on old kernels.
# We aren't sure exactly how old is a problem: 4.15 works, but with 4.4 new
# rules are added to all chains in the requested table rather than just one,
# and the new rules seem to have no useful effect.  In such cases,
# iptables-legacy works better.
#
# We can simplify this once livecd-rootfs no longer needs to support running
# on Ubuntu 16.04 (that is, once Launchpad's build VMs are upgraded to
# Ubuntu 18.04).
run_iptables () {
    local kver kver_major kver_minor

    kver="$(uname -r)"
    kver="${kver%%-*}"
    kver_major="${kver%%.*}"
    kver="${kver#*.}"
    kver_minor="${kver%%.*}"


    # LP: #1917920
    # I'm seeing issues after iptables got upgraded from 1.8.5 to
    # 1.8.7 Somehow installing our nat rule doesn't get activated, and
    # no networking is happening at all.

    # But somehow calling both iptables -S makes things start working.
    # Maybe no default chains are installed in our network namespace?!
    # Or 1.8.7 is somehow broken?
    iptables -v -t nat -S
    iptables-legacy -v -t nat -S

    if [ "$kver_major" -lt 4 ] || \
       ([ "$kver_major" = 4 ] && [ "$kver_minor" -lt 15 ]); then
        iptables-legacy "$@"
    else
        iptables "$@"
    fi
}

if [ -n "$REPO_SNAPSHOT_STAMP" ]; then
    if [ "`whoami`" != "root" ]; then
        echo "Magic repo snapshots only work when running as root." >&2
        exit 1
    fi

    apt-get -qyy install iptables

    # Redirect all outgoing traffic to port 80 to proxy instead.
    run_iptables -v -t nat -A OUTPUT -p tcp --dport 80 \
        -m owner ! --uid-owner daemon -j REDIRECT --to 8080

    # Run proxy as "daemon" to avoid infinite loop.
    LB_PARENT_MIRROR_BOOTSTRAP=$LB_PARENT_MIRROR_BOOTSTRAP \
    /usr/share/livecd-rootfs/magic-proxy \
        --address="127.0.0.1" \
        --port=8080 \
        --run-as=daemon \
        --cutoff-time="$REPO_SNAPSHOT_STAMP" \
        --log-file=/build/livecd.magic-proxy.log \
        --pid-file=config/magic-proxy.pid \
        --background \
        --setsid

    # Quick check that magic proxy & iptables chains are working
    timeout 3m apt-get update
fi

# Link output files somewhere launchpad-buildd will be able to find them.
PREFIX="livecd.$PROJECT${SUBARCH:+-$SUBARCH}"

if [ "${IMAGEFORMAT:-}" = "ubuntu-image" ]; then
	# Use ubuntu-image instead of live-build

	if [ "$PROJECT" = "ubuntu-core" ]; then
		env SNAPPY_STORE_NO_CDN=1 \
		ubuntu-image snap $UBUNTU_IMAGE_ARGS \
			-O output "$PREFIX".model-assertion
		# XXX: currently we only have one image generated, but really
		#  we should be supporting more than one for models that
		#  define those.
		mv output/*.img "$PREFIX".img
		xz -0 -T4 "$PREFIX".img
		mv output/seed.manifest "$PREFIX".manifest
	else
		# First we need to build the gadget tree
		make -C "config/$PREFIX-gadget" \
			ARCH=$ARCH SERIES=$SUITE $GADGET_TARGET
		ubuntu-image classic $UBUNTU_IMAGE_ARGS \
			-s $SUITE -p $PROJECT -a $ARCH --subarch $SUBARCH \
			-O output config/$PREFIX-gadget/install
		# XXX: currently we only have one image generated, but really
		#  we should be supporting more than one for models that
		#  define those.
		mv output/*.img "$PREFIX".img
		xz -0 -T4 "$PREFIX".img
		# Also link the output image to a filename that cdimage expects
		ln "$PREFIX".img.xz livecd.ubuntu-cpc.disk1.img.xz
		mv output/filesystem.manifest "$PREFIX".manifest
	fi

	exit 0
fi

# Setup cleanup function
Setup_cleanup

preinstall_snaps() {
	setup_mountpoint chroot

	snap_prepare chroot

	for snap in "$@"; do
		SNAP_NO_VALIDATE_SEED=1 snap_preseed chroot "${snap}"
	done

	snap_validate_seed chroot

	teardown_mountpoint chroot
}

rm -f binary.success
(

	lb bootstrap "$@"

	Chroot chroot "dpkg-divert --quiet --add \
		--divert /usr/sbin/update-initramfs.REAL --rename \
		/usr/sbin/update-initramfs"
	cat > chroot/usr/sbin/update-initramfs <<'EOF'
#! /bin/sh
if [ $# != 1 ] || [ "$1" != -u ]; then
	exec update-initramfs.REAL "$@"
fi
echo "update-initramfs: diverted by livecd-rootfs (will be called later)" >&2
exit 0
EOF
	chmod +x chroot/usr/sbin/update-initramfs

	cat > config/hooks/999-undivert-update-initramfs.chroot <<'EOF'
#! /bin/sh
rm -f /usr/sbin/update-initramfs
dpkg-divert --quiet --remove --rename /usr/sbin/update-initramfs
EOF

        cat > config/hooks/fixvmlinuz.binary <<'EOF'
#! /bin/sh
kernel=$(ls binary/casper/vmlinuz-* | grep -v efi | sort_by_version | tac | head -1)
kernel_efi=$(ls binary/casper/vmlinuz-* | grep efi | sort_by_version | tac | head -1)
initrd=$(ls binary/casper/initrd.img-* | grep -v efi | sort_by_version | tac | head -1)
if [ ! -z $kernel ]; then
        cp $kernel binary/casper/vmlinuz
fi
if [ ! -z $kernel_efi ]; then
        cp $kernel_efi binary/casper/vmlinuz.efi
fi

if [ ! -e "binary/casper/vmlinuz.efi" ]; then
		cp binary/casper/vmlinuz binary/casper/vmlinuz.efi
fi

cp $initrd binary/casper/initrd.lz
EOF

		[ ! -e "/usr/share/isomaker/defaultsettings" ] || . "/usr/share/isomaker/defaultsettings"
		[ ! -e "auto/settings" ] || . auto/settings
		if [ "${LB_ARCHITECTURES}" = 'amd64' ]; then
        	cat > pooltemplatevariables <<EOF
s%\${SUITE}%${LB_DISTRIBUTION}%g
s%\${MIRROR}%${LB_MIRROR_CHROOT}%g
s%\${DISTRIBUTION_VERSION}%${DISTRIBUTION_VERSION}%g
s%\${DISTRIBUTION_NAME}%${DISTRIBUTION_NAME}%g
EOF
        	cat > config/hooks/generatepoolefi.binary <<'EOF'
#! /bin/sh
sed -i -f pooltemplatevariables binary/conf/distributions
sed -i -f pooltemplatevariables binary/conf/updates
rm pooltemplatevariables
cd binary
reprepro update
reprepro retrack
reprepro export
cd ..
EOF
		fi
	lb chroot "$@"

	echo "===== Checking size of /usr/share/doc ====="
	echo BEGIN docdirs
	(cd chroot && find usr/share/doc -maxdepth 1 -type d | xargs du -s | sort -nr)
	echo END docdirs
	rm chroot/etc/apt/sources.list.d/* || true
	rm -rf chroot/var/lib/apt/lists/lliurex.net* || true
	cp -r config/final_apt/* chroot/etc/apt/ 2>/dev/null || true


	if [ -e "config/seeded-snaps" ]; then
		assertions_dir="chroot/var/lib/snapd/seed/assertions"
		model_assertion="$assertions_dir/generic-classic.model"
		account_key_assertion="$assertions_dir/generic.account-key"
		account_assertion="$assertions_dir/generic.account"

		mkdir -p "$assertions_dir"
		snap known --remote model series=16 model=generic-classic brand-id=generic > "$model_assertion"
		account_key=$(sed -n -e's/sign-key-sha3-384: //p' < "$model_assertion")

		snap known --remote account-key public-key-sha3-384="$account_key" > "$account_key_assertion"
		account=$(sed -n -e's/account-id: //p' < "$account_key_assertion")

		snap known --remote account account-id=generic > "$account_assertion"
		snap_list=$(cat config/seeded-snaps)
		preinstall_snaps $snap_list
	fi

	configure_network_manager

	mkdir -p binary/.disk/ || true
	echo full_cd/single > binary/.disk/cd_type

	cp /usr/lib/live/build/lb_binary custom_binary
	cp /usr/lib/live/build/lb_binary_disk custom_binary_disk
	chmod +x custom_binary custom_binary_disk

	# Enabling custom_binary_disk
	sed -i -e 's%^lb binary_disk ${\*}%./custom_binary_disk ${*}%g' custom_binary
	# Fixing disk/info
	sed -i -e "s%Ubuntu%${DISTRIBUTION_NAME}%g" custom_binary_disk

	if [ "${LB_ARCHITECTURES}" = 'amd64' ]; then
		sed -i -e 's%^lb binary_iso ${\*}%auto/custombuildiso ${*}%g' custom_binary
	fi

	./custom_binary "$@"
	touch binary.success
) 2>&1 | tee binary.log

# bash has trouble with the build.sh sourcing arrangement at the top of this
# file, so we use this cheap-and-cheerful approach rather than the more
# correct 'set -o pipefail'.
if [ -e binary.success ]; then
	rm -f binary.success
else
	exit 1
fi

# Link output files somewhere BuildLiveCD will be able to find them.
PREFIX="livecd.$PROJECT${SUBARCH:+-$SUBARCH}"

case $LB_INITRAMFS in
	casper)
		INITFS="casper"
		;;

	live-boot)
		INITFS="live"
		;;

	*)
		INITFS="boot"
		;;
esac

for OUTPUT in ext2 ext3 ext4 manifest manifest-remove size squashfs; do
	[ -e "binary/$INITFS/filesystem.$OUTPUT" ] || continue
	ln "binary/$INITFS/filesystem.$OUTPUT" "$PREFIX.$OUTPUT"
	chmod 644 "$PREFIX.$OUTPUT"
done

for ISO in binary.iso binary.hybrid.iso; do
	[ -e "$ISO" ] || continue
	ln "$ISO" "$PREFIX.iso"
	chmod 644 "$PREFIX.iso"
	break
done

if [ -e "binary/$INITFS/filesystem.dir" ]; then
	(cd "binary/$INITFS/filesystem.dir/" && tar -c --sort=name --xattrs *) | \
		gzip -9 --rsyncable > "$PREFIX.rootfs.tar.gz"
	chmod 644 "$PREFIX.rootfs.tar.gz"
elif [ -e binary-tar.tar.gz ]; then
	cp -a binary-tar.tar.gz "$PREFIX.rootfs.tar.gz"
fi

# '--initramfs none' produces different manifest names.
if [ -e "binary/$INITFS/filesystem.packages" ]; then
	ln "binary/$INITFS/filesystem.packages" "$PREFIX.manifest"
	chmod 644 "$PREFIX.manifest"
fi
if [ -e "binary/$INITFS/filesystem.packages-remove" ]; then
	# Not a typo, empty manifest-remove has a single LF in it. :/
	if [ $(cat binary/$INITFS/filesystem.packages-remove | wc -c) -gt 1 ]; then
		ln "binary/$INITFS/filesystem.packages-remove" "$PREFIX.manifest-remove"
		chmod 644 "$PREFIX.manifest-remove"
	fi
fi


for FLAVOUR in $LB_LINUX_FLAVOURS; do
	if [ -z "$LB_LINUX_FLAVOURS" ] || [ "$LB_LINUX_FLAVOURS" = "none" ]; then
		continue
	fi
	if [ "$FLAVOUR" = "virtual" ]; then
		# The virtual kernel is named generic in /boot
		FLAVOUR="generic"
	fi
	KVERS="$( (cd "binary/$INITFS"; ls vmlinu?-* 2>/dev/null || true) | (fgrep -v .efi || true) | sed -n "s/^vmlinu.-\\([^-]*-[^-]*-$FLAVOUR\\)$/\\1/p" )"
	if [ -z "$KVERS" ]; then
		if [ -e "binary/$INITFS/vmlinuz" ]; then
			# already renamed by ubuntu-defaults-image
			break
		fi
		echo "No kernel output for $FLAVOUR!" >&2
		exit 1
	fi
	NUMKVERS="$(set -- $KVERS; echo $#)"
	if [ "$NUMKVERS" -gt 1 ]; then
		echo "Cannot handle more than one kernel for $FLAVOUR ($KVERS)!" >&2
		exit 1
	fi
	ln "binary/$INITFS/"vmlinu?-"$KVERS" "$PREFIX.kernel-$FLAVOUR"
	if [ -e "binary/$INITFS/"vmlinu?-"$KVERS.efi.signed" ]; then
		ln "binary/$INITFS/"vmlinu?-"$KVERS.efi.signed" "$PREFIX.kernel-$FLAVOUR.efi.signed"
		chmod 644 "$PREFIX.kernel-$FLAVOUR.efi.signed"
	fi
	chmod 644 "$PREFIX.kernel-$FLAVOUR"
	if [ -e "binary/$INITFS/initrd.img-$KVERS" ]; then
		ln "binary/$INITFS/initrd.img-$KVERS" "$PREFIX.initrd-$FLAVOUR"
		chmod 644 "$PREFIX.initrd-$FLAVOUR"
	fi
done

NUMFLAVOURS="$(set -- $LB_LINUX_FLAVOURS; echo $#)"
if [ "$NUMFLAVOURS" = 1 ] && [ "$LB_LINUX_FLAVOURS" != "none" ]; then
	# only one kernel flavour
	if [ -f "binary/$INITFS/vmlinuz" ] && ! [ -h "binary/$INITFS/vmlinuz" ]; then
		ln "binary/$INITFS/vmlinuz" "$PREFIX.kernel"
		chmod 644 "$PREFIX.kernel"
	else
		ln -sf "$PREFIX.kernel-$LB_LINUX_FLAVOURS" "$PREFIX.kernel"
	fi
	if [ -f "binary/$INITFS/initrd.lz" ] && ! [ -h "binary/$INITFS/initrd.lz" ]; then
		ln "binary/$INITFS/initrd.lz" "$PREFIX.initrd"
		chmod 644 "$PREFIX.initrd"
	else
		ln -sf "$PREFIX.initrd-$LB_LINUX_FLAVOURS" "$PREFIX.initrd"
	fi
fi
